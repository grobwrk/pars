<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="resources_8h" kind="file" language="C++">
    <compoundname>resources.h</compoundname>
    <includes refid="log_8h" local="yes">pars/log.h</includes>
    <includes local="no">fmt/format.h</includes>
    <includes local="no">mutex</includes>
    <includes local="no">stdexcept</includes>
    <includes local="no">unordered_map</includes>
    <includedby refid="pars_8h" local="yes">/home/runner/work/pars/pars/lib/include/pars/pars.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>/home/runner/work/pars/pars/lib/include/pars/app/resources.h</label>
        <link refid="resources_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>init.h</label>
        <link refid="init_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>pars/log.h</label>
        <link refid="log_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>chrono</label>
      </node>
      <node id="8">
        <label>config.h</label>
      </node>
      <node id="6">
        <label>fmt/format.h</label>
      </node>
      <node id="14">
        <label>mutex</label>
      </node>
      <node id="4">
        <label>nng/nng.h</label>
      </node>
      <node id="7">
        <label>spdlog/common.h</label>
      </node>
      <node id="10">
        <label>spdlog/sinks/basic_file_sink.h</label>
      </node>
      <node id="11">
        <label>spdlog/sinks/null_sink.h</label>
      </node>
      <node id="12">
        <label>spdlog/sinks/stdout_color_sinks.h</label>
      </node>
      <node id="13">
        <label>spdlog/sinks/syslog_sink.h</label>
      </node>
      <node id="9">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="15">
        <label>stdexcept</label>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="5">
        <label>/home/runner/work/pars/pars/example/client.cpp</label>
        <link refid="client_8cpp"/>
      </node>
      <node id="3">
        <label>/home/runner/work/pars/pars/example/common.h</label>
        <link refid="common_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/runner/work/pars/pars/example/event.h</label>
        <link refid="example_2event_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>/home/runner/work/pars/pars/example/server_backend.cpp</label>
        <link refid="server__backend_8cpp"/>
      </node>
      <node id="1">
        <label>/home/runner/work/pars/pars/lib/include/pars/app/resources.h</label>
        <link refid="resources_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/runner/work/pars/pars/lib/include/pars/pars.h</label>
        <link refid="pars_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structpars_1_1app_1_1lockable" prot="public">pars::app::lockable</innerclass>
    <innerclass refid="structpars_1_1app_1_1locked" prot="public">pars::app::locked</innerclass>
    <innerclass refid="classpars_1_1app_1_1resources" prot="public">pars::app::resources</innerclass>
    <innernamespace refid="namespacepars">pars</innernamespace>
    <innernamespace refid="namespacepars_1_1app">pars::app</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment">Copyright<sp/>(c)<sp/>2025<sp/>Giuseppe<sp/>Roberti.</highlight></codeline>
<codeline lineno="3"><highlight class="comment">All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"></highlight></codeline>
<codeline lineno="5"><highlight class="comment">Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without<sp/>modification,</highlight></codeline>
<codeline lineno="6"><highlight class="comment">are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="7"><highlight class="comment"></highlight></codeline>
<codeline lineno="8"><highlight class="comment">1.<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,<sp/>this</highlight></codeline>
<codeline lineno="9"><highlight class="comment">list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment">2.<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="12"><highlight class="comment">this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation<sp/>and/or</highlight></codeline>
<codeline lineno="13"><highlight class="comment">other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"></highlight></codeline>
<codeline lineno="15"><highlight class="comment">3.<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>the<sp/>copyright<sp/>holder<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its<sp/>contributors</highlight></codeline>
<codeline lineno="16"><highlight class="comment">may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from<sp/>this<sp/>software<sp/>without</highlight></codeline>
<codeline lineno="17"><highlight class="comment">specific<sp/>prior<sp/>written<sp/>permission.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment">THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS<sp/>&quot;AS<sp/>IS&quot;<sp/>AND</highlight></codeline>
<codeline lineno="20"><highlight class="comment">ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="21"><highlight class="comment">WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="22"><highlight class="comment">DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT<sp/>HOLDER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="23"><highlight class="comment">ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="24"><highlight class="comment">(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="25"><highlight class="comment">LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON</highlight></codeline>
<codeline lineno="26"><highlight class="comment">ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="27"><highlight class="comment">(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="28"><highlight class="comment">SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="29"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="log_8h" kindref="compound">pars/log.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fmt/format.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;mutex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="namespacepars" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacepars_1_1app" kindref="compound">pars::app</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>resource_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>mtx_t&gt;</highlight></codeline>
<codeline lineno="44" refid="structpars_1_1app_1_1lockable" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1lockable" kindref="compound">lockable</ref></highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46" refid="structpars_1_1app_1_1lockable_1a55f35a3363fc412e13a9e558142ea664" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1lockable_1a55f35a3363fc412e13a9e558142ea664" kindref="member">resource_type</ref><sp/>=<sp/>resource_t;</highlight></codeline>
<codeline lineno="47" refid="structpars_1_1app_1_1lockable_1a431dc4dbab379c2642cbd042236c9840" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1lockable_1a431dc4dbab379c2642cbd042236c9840" kindref="member">mutex_type</ref><sp/>=<sp/>mtx_t;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="structpars_1_1app_1_1lockable_1ae5039a1664784dc3ddecff88e9a4a5af" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpars_1_1app_1_1lockable_1a55f35a3363fc412e13a9e558142ea664" kindref="member">resource_type</ref>&amp;<sp/><ref refid="structpars_1_1app_1_1lockable_1ae5039a1664784dc3ddecff88e9a4a5af" kindref="member">resource</ref>;</highlight></codeline>
<codeline lineno="50" refid="structpars_1_1app_1_1lockable_1a5a2adeeabcf05de480ceb6abf4254c29" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpars_1_1app_1_1lockable_1a431dc4dbab379c2642cbd042236c9840" kindref="member">mutex_type</ref>&amp;<sp/><ref refid="structpars_1_1app_1_1lockable_1a5a2adeeabcf05de480ceb6abf4254c29" kindref="member">mutex</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>resource_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>mutex_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>key_t,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>lock_t<sp/>=<sp/>std::unique_lock&lt;mutex_t&gt;&gt;</highlight></codeline>
<codeline lineno="55" refid="structpars_1_1app_1_1locked" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1locked_1aafbfde1583496ba5b1d5e238f80d6c57" kindref="member">locked</ref></highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58" refid="structpars_1_1app_1_1locked_1a9a2b0736b77c5ead8eee71be6f9d75d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1locked_1a9a2b0736b77c5ead8eee71be6f9d75d4" kindref="member">resource_type</ref><sp/>=<sp/>resource_t;</highlight></codeline>
<codeline lineno="59" refid="structpars_1_1app_1_1locked_1a65b4d9f23e5af3b79faea17d1ac7bfc1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1locked_1a65b4d9f23e5af3b79faea17d1ac7bfc1" kindref="member">mutex_type</ref><sp/>=<sp/>mutex_t;</highlight></codeline>
<codeline lineno="60" refid="structpars_1_1app_1_1locked_1aa6252d8af3fb66a2cd64d827b80ae233" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1locked_1aa6252d8af3fb66a2cd64d827b80ae233" kindref="member">key_type</ref><sp/>=<sp/>key_t;</highlight></codeline>
<codeline lineno="61" refid="structpars_1_1app_1_1locked_1a0cb43ef1bc99fe453a8c925e3ba9264b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="structpars_1_1app_1_1locked_1a0cb43ef1bc99fe453a8c925e3ba9264b" kindref="member">lock_type</ref><sp/>=<sp/>lock_t;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structpars_1_1app_1_1locked_1aafbfde1583496ba5b1d5e238f80d6c57" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structpars_1_1app_1_1locked_1aafbfde1583496ba5b1d5e238f80d6c57" kindref="member">locked</ref>(<ref refid="structpars_1_1app_1_1lockable" kindref="compound">lockable&lt;resource_type, mutex_type&gt;</ref><sp/>l,<sp/><ref refid="structpars_1_1app_1_1locked_1aa6252d8af3fb66a2cd64d827b80ae233" kindref="member">key_type</ref><sp/>k)</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>lockable_m{l}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>key_m{k}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>,<sp/>guard_m{<ref refid="structpars_1_1app_1_1locked_1a0cb43ef1bc99fe453a8c925e3ba9264b" kindref="member">lock_type</ref>{l.mutex}}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="structpars_1_1app_1_1locked_1a39271a8cafcc169b5d87ea72101ab085" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="structpars_1_1app_1_1locked_1a39271a8cafcc169b5d87ea72101ab085" kindref="member">resource</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lockable_m.resource;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structpars_1_1app_1_1locked_1ab90f23af2da4590b24aa6088bd7ffb73" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="structpars_1_1app_1_1locked_1ab90f23af2da4590b24aa6088bd7ffb73" kindref="member">guard</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>guard_m;<sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structpars_1_1app_1_1locked_1ae567b61bdb1515e2240afacdd2305511" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/><ref refid="structpars_1_1app_1_1locked_1ae567b61bdb1515e2240afacdd2305511" kindref="member">key</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_m;<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="structpars_1_1app_1_1lockable" kindref="compound">lockable&lt;resource_type, mutex_type&gt;</ref><sp/>lockable_m;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="structpars_1_1app_1_1locked_1aa6252d8af3fb66a2cd64d827b80ae233" kindref="member">key_type</ref><sp/>key_m;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="structpars_1_1app_1_1locked_1a0cb43ef1bc99fe453a8c925e3ba9264b" kindref="member">lock_type</ref><sp/>guard_m;</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>key_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>resource_t,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>mutex_t<sp/>=<sp/>std::mutex&gt;</highlight></codeline>
<codeline lineno="83" refid="classpars_1_1app_1_1resources" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classpars_1_1app_1_1resources_1ac9e8ce692f9cc5160673466441f1767c" kindref="member">resources</ref></highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="86" refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>=<sp/>key_t;</highlight></codeline>
<codeline lineno="87" refid="classpars_1_1app_1_1resources_1a30e8f3dde30a2d25000532b660fb4638" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classpars_1_1app_1_1resources_1a30e8f3dde30a2d25000532b660fb4638" kindref="member">resource_type</ref><sp/>=<sp/>resource_t;</highlight></codeline>
<codeline lineno="88" refid="classpars_1_1app_1_1resources_1a2685a2f197a3188a9445c9b953468bba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal"><ref refid="classpars_1_1app_1_1resources_1a2685a2f197a3188a9445c9b953468bba" kindref="member">mutex_type</ref><sp/>=<sp/>mutex_t;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="classpars_1_1app_1_1resources_1ac9e8ce692f9cc5160673466441f1767c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classpars_1_1app_1_1resources_1ac9e8ce692f9cc5160673466441f1767c" kindref="member">resources</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classpars_1_1app_1_1resources_1a2e23693794833a2132b8f2b0f7472958" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="classpars_1_1app_1_1resources_1a2e23693794833a2132b8f2b0f7472958" kindref="member">count</ref>()</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>guard<sp/>=<sp/>std::lock_guard{mtx_m};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resources_m.size();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classpars_1_1app_1_1resources_1a15142e9918be4fbf91d1c7121e5bcd17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1a15142e9918be4fbf91d1c7121e5bcd17" kindref="member">contains</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>key)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>guard<sp/>=<sp/>std::lock_guard{mtx_m};</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>resources_m.contains(key);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="107" refid="classpars_1_1app_1_1resources_1a75257805bb039b3b3089058c828f491e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1a75257805bb039b3b3089058c828f491e" kindref="member">find_or_emplace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>key,<sp/>args_t&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(resources_m.contains(key))</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_locked(key,<sp/>resources_m);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1a5c8091ebeeaad5483cdc9a56cd85420d" kindref="member">emplace</ref>(key,<sp/>std::forward&lt;args&gt;(args)...);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>args_t&gt;</highlight></codeline>
<codeline lineno="115" refid="classpars_1_1app_1_1resources_1a5c8091ebeeaad5483cdc9a56cd85420d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1a5c8091ebeeaad5483cdc9a56cd85420d" kindref="member">emplace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>key,<sp/>args_t&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>guard<sp/>=<sp/>std::lock_guard{mtx_m};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>mtx<sp/>=<sp/>mtxs_m.try_emplace(key);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!mtx.second)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(fmt::format(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>emplace<sp/>a<sp/>new<sp/>Resource<sp/>Mutex<sp/>[key:<sp/>0x{:X}]&quot;</highlight><highlight class="normal">,<sp/>key));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>res<sp/>=<sp/>resources_m.try_emplace(key,<sp/>std::forward&lt;args_t&gt;(args)...);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!res.second)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mtxs_m.erase(mtx.first);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Unable<sp/>to<sp/>emplace<sp/>a<sp/>new<sp/>Resource<sp/>[key:<sp/>0x{:X}]&quot;</highlight><highlight class="normal">,<sp/>key));</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepars_1acf366c3b2c7f2027ca1f4694e783ecb1" kindref="member">pars::debug</ref>(<ref refid="log_8h_1ad71aeb03d03709c5072b99cb68c21992" kindref="member">SL</ref>,<sp/><ref refid="namespacepars_1a12232d6f4a47a54243d1c224c421b535ad2a57dc1d883fd21fb9951699df71cc7" kindref="member">lf::app</ref>,<sp/></highlight><highlight class="stringliteral">&quot;Emplaced<sp/>Resource<sp/>[key:<sp/>0x{:X}]&quot;</highlight><highlight class="normal">,<sp/>key);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structpars_1_1app_1_1locked" kindref="compound">locked</ref>{<ref refid="structpars_1_1app_1_1lockable" kindref="compound">lockable</ref>{res.first-&gt;second,<sp/>mtx.first-&gt;second},<sp/>key};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classpars_1_1app_1_1resources_1ae6eca187cf0223ab3e81981233872d8a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ae6eca187cf0223ab3e81981233872d8a" kindref="member">locked_resource</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>k)</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structpars_1_1app_1_1locked" kindref="compound">locked&lt;resource_type, mutex_type, key_type&gt;</ref></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>find_locked(k,<sp/>resources_m);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="classpars_1_1app_1_1resources_1ab7d9f4955306027ac7d06f47878e20ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ab7d9f4955306027ac7d06f47878e20ef" kindref="member">delete_resource</ref>(<ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>k)</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>guard<sp/>=<sp/>std::lock_guard{mtx_m};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>guard<sp/>=<sp/>std::lock_guard{mtxs_m.at(k)};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resources_m.erase(k);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>mtxs_m.erase(k);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>find_locked(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classpars_1_1app_1_1resources_1ab848c73436876e6aab03435bd1c927e3" kindref="member">key_type</ref><sp/>key,</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unordered_map&lt;key_type,<sp/>resource_type&gt;&amp;<sp/>xs)</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/><ref refid="structpars_1_1app_1_1locked" kindref="compound">locked&lt;resource_type, mutex_type, key_type&gt;</ref></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>guard<sp/>=<sp/>std::lock_guard{mtx_m};</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!xs.contains(key))</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::out_of_range(</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fmt::format(</highlight><highlight class="stringliteral">&quot;Object<sp/>not<sp/>found<sp/>for<sp/>Key<sp/>0x{:X}&quot;</highlight><highlight class="normal">,<sp/>key));</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>x<sp/>=<sp/>xs.at(key);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>locked{lockable{x,<sp/>mtxs_m.at(key)},<sp/>key};</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>std::mutex<sp/>mtx_m;<sp/></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;key_type,<sp/>mutex_type&gt;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>mtxs_m;<sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;key_type,<sp/>resource_type&gt;<sp/>resources_m;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>pars::app</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/runner/work/pars/pars/lib/include/pars/app/resources.h"/>
  </compounddef>
</doxygen>
