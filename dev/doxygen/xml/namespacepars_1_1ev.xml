<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="namespacepars_1_1ev" kind="namespace" language="C++">
    <compoundname>pars::ev</compoundname>
    <innerclass refid="structpars_1_1ev_1_1base__async__metadata" prot="public">pars::ev::base_async_metadata</innerclass>
    <innerclass refid="structpars_1_1ev_1_1base__internal__metadata" prot="public">pars::ev::base_internal_metadata</innerclass>
    <innerclass refid="structpars_1_1ev_1_1base__kind" prot="public">pars::ev::base_kind</innerclass>
    <innerclass refid="structpars_1_1ev_1_1base__kind_3_01kind__of_00_01event__t_01_4" prot="public">pars::ev::base_kind&lt; kind_of, event_t &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1base__klass" prot="public">pars::ev::base_klass</innerclass>
    <innerclass refid="structpars_1_1ev_1_1base__network__metadata" prot="public">pars::ev::base_network_metadata</innerclass>
    <innerclass refid="structpars_1_1ev_1_1base__sync__metadata" prot="public">pars::ev::base_sync_metadata</innerclass>
    <innerclass refid="structpars_1_1ev_1_1common__kind" prot="public">pars::ev::common_kind</innerclass>
    <innerclass refid="structpars_1_1ev_1_1common__metadata" prot="public">pars::ev::common_metadata</innerclass>
    <innerclass refid="structpars_1_1ev_1_1creating__pipe" prot="public">pars::ev::creating_pipe</innerclass>
    <innerclass refid="classpars_1_1ev_1_1dispatcher" prot="public">pars::ev::dispatcher</innerclass>
    <innerclass refid="classpars_1_1ev_1_1enqueuer" prot="public">pars::ev::enqueuer</innerclass>
    <innerclass refid="structpars_1_1ev_1_1exception" prot="public">pars::ev::exception</innerclass>
    <innerclass refid="structpars_1_1ev_1_1fired" prot="public">pars::ev::fired</innerclass>
    <innerclass refid="structpars_1_1ev_1_1fired_3_01event__t_01_4" prot="public">pars::ev::fired&lt; event_t &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1hf__registry" prot="public">pars::ev::hf_registry</innerclass>
    <innerclass refid="structpars_1_1ev_1_1hf__traits" prot="public">pars::ev::hf_traits</innerclass>
    <innerclass refid="structpars_1_1ev_1_1hf__traits_3_01return__t_07class__t_1_1_5_08_07hf__arg_3_01kind__of_00_01event__t_01_4_08_4" prot="public">pars::ev::hf_traits&lt; return_t(class_t::*)(hf_arg&lt; kind_of, event_t &gt;)&gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1init" prot="public">pars::ev::init</innerclass>
    <innerclass refid="classpars_1_1ev_1_1job" prot="public">pars::ev::job</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass" prot="public">pars::ev::klass</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01creating__pipe_01_4" prot="public">pars::ev::klass&lt; creating_pipe &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01exception_01_4" prot="public">pars::ev::klass&lt; exception &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01init_01_4" prot="public">pars::ev::klass&lt; init &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01network__error_01_4" prot="public">pars::ev::klass&lt; network_error &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01nngxx_1_1msg_01_4" prot="public">pars::ev::klass&lt; nngxx::msg &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01pipe__created_01_4" prot="public">pars::ev::klass&lt; pipe_created &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01pipe__removed_01_4" prot="public">pars::ev::klass&lt; pipe_removed &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01shutdown_01_4" prot="public">pars::ev::klass&lt; shutdown &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_01std_1_1shared__ptr_3_01event__t_01_4_01_4" prot="public">pars::ev::klass&lt; std::shared_ptr&lt; event_t &gt; &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_1_1pars__example_1_1event_1_1fib__computed_01_4" prot="public">pars::ev::klass&lt;::pars_example::event::fib_computed &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_1_1pars__example_1_1event_1_1fib__requested_01_4" prot="public">pars::ev::klass&lt;::pars_example::event::fib_requested &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1klass_3_1_1pars__example_1_1event_1_1stop__compute_01_4" prot="public">pars::ev::klass&lt;::pars_example::event::stop_compute &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1metadata" prot="public">pars::ev::metadata</innerclass>
    <innerclass refid="structpars_1_1ev_1_1metadata_3_01kind__of_00_01event__t_01_4" prot="public">pars::ev::metadata&lt; kind_of, event_t &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1network__error" prot="public">pars::ev::network_error</innerclass>
    <innerclass refid="structpars_1_1ev_1_1pipe__created" prot="public">pars::ev::pipe_created</innerclass>
    <innerclass refid="structpars_1_1ev_1_1pipe__removed" prot="public">pars::ev::pipe_removed</innerclass>
    <innerclass refid="structpars_1_1ev_1_1received" prot="public">pars::ev::received</innerclass>
    <innerclass refid="structpars_1_1ev_1_1received_3_01event__t_01_4" prot="public">pars::ev::received&lt; event_t &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1received_3_01nngxx_1_1msg_01_4" prot="public">pars::ev::received&lt; nngxx::msg &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1runner" prot="public">pars::ev::runner</innerclass>
    <innerclass refid="structpars_1_1ev_1_1sent" prot="public">pars::ev::sent</innerclass>
    <innerclass refid="structpars_1_1ev_1_1sent_3_01event__t_01_4" prot="public">pars::ev::sent&lt; event_t &gt;</innerclass>
    <innerclass refid="structpars_1_1ev_1_1serialize" prot="public">pars::ev::serialize</innerclass>
    <innerclass refid="structpars_1_1ev_1_1shutdown" prot="public">pars::ev::shutdown</innerclass>
    <innerclass refid="classpars_1_1ev_1_1spec" prot="public">pars::ev::spec</innerclass>
    <innerclass refid="structpars_1_1ev_1_1uuid" prot="public">pars::ev::uuid</innerclass>
    <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacepars_1_1ev_1a5d83a3f8137beca4555739cbaae1d8a8" prot="public" static="no" strong="yes">
        <type></type>
        <name>executes</name>
        <qualifiedname>pars::ev::executes</qualifiedname>
        <enumvalue id="namespacepars_1_1ev_1a5d83a3f8137beca4555739cbaae1d8a8a63ad9d34f3503826e5f649ae6b7ac92c" prot="public">
          <name>sync</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacepars_1_1ev_1a5d83a3f8137beca4555739cbaae1d8a8a0df93e34273b367bb63bad28c94c78d5" prot="public">
          <name>async</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/concept/event.h" line="40" column="1" bodyfile="/home/runner/work/pars/pars/lib/include/pars/concept/event.h" bodystart="41" bodyend="44"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacepars_1_1ev_1a00ecaf1d503708d125b0a5f259ceea13" prot="public" static="no">
        <type>std::function&lt; void(<ref refid="classpars_1_1ev_1_1job" kindref="compound">job</ref>)&gt;</type>
        <definition>using pars::ev::job_handler_f =  std::function&lt;void(job)&gt;</definition>
        <argsstring></argsstring>
        <name>job_handler_f</name>
        <qualifiedname>pars::ev::job_handler_f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/hf_registry.h" line="60" column="1" bodyfile="/home/runner/work/pars/pars/lib/include/pars/ev/hf_registry.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepars_1_1ev_1ada8ba2faa8e8f8b6a385eb2156e52613" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>kind_of</declname>
            <defname>kind_of</defname>
          </param>
          <param>
            <type>event_c</type>
            <declname>event_t</declname>
            <defname>event_t</defname>
          </param>
        </templateparamlist>
        <type>kind_of&lt; event_t &gt;</type>
        <definition>using pars::ev::hf_arg =  kind_of&lt;event_t&gt;</definition>
        <argsstring></argsstring>
        <name>hf_arg</name>
        <qualifiedname>pars::ev::hf_arg</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/make_hf.h" line="46" column="1" bodyfile="/home/runner/work/pars/pars/lib/include/pars/ev/make_hf.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacepars_1_1ev_1a775df579549c610e3e2c8dae429f129c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>kind_of</declname>
            <defname>kind_of</defname>
          </param>
          <param>
            <type>event_c</type>
            <declname>event_t</declname>
            <defname>event_t</defname>
          </param>
        </templateparamlist>
        <type>std::move_only_function&lt; void(<ref refid="namespacepars_1_1ev_1ada8ba2faa8e8f8b6a385eb2156e52613" kindref="member">hf_arg</ref>&lt; kind_of, event_t &gt;)&gt;</type>
        <definition>using pars::ev::handler_f =  std::move_only_function&lt;void(hf_arg&lt;kind_of, event_t&gt;)&gt;</definition>
        <argsstring></argsstring>
        <name>handler_f</name>
        <qualifiedname>pars::ev::handler_f</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/make_hf.h" line="50" column="1" bodyfile="/home/runner/work/pars/pars/lib/include/pars/ev/make_hf.h" bodystart="50" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="namespacepars_1_1ev_1a58e440168c167811c469e731225cf6b7" prot="public" static="no" constexpr="yes" mutable="no">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>kind_of</declname>
            <defname>kind_of</defname>
          </param>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>event_t</declname>
            <defname>event_t</defname>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto pars::ev::is_same_kind_v</definition>
        <argsstring></argsstring>
        <name>is_same_kind_v</name>
        <qualifiedname>pars::ev::is_same_kind_v</qualifiedname>
        <initializer>= std::is_same_v&lt;kind_of&lt;void&gt;, event_t&lt;void&gt;&gt;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/concept/kind.h" line="56" column="16" bodyfile="/home/runner/work/pars/pars/lib/include/pars/concept/kind.h" bodystart="56" bodyend="-1"/>
        <referencedby refid="structpars_1_1ev_1_1klass_3_1_1pars__example_1_1event_1_1fib__requested_01_4_1af6e81558d2cc6bb5a6c79f2c6e200e1a" compoundref="example_2event_8h" startline="94" endline="100">pars::ev::klass&lt;::pars_example::event::fib_requested &gt;::exec_policy</referencedby>
        <referencedby refid="classpars_1_1ev_1_1job_1a7543ef2b21ff5e3383300eaef165784a">pars::ev::job::operator=</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="namespacepars_1_1ev_1af4b588b6e73576f4d4e0618665fa35e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>kind_of</declname>
            <defname>kind_of</defname>
          </param>
          <param>
            <type>event_c</type>
            <declname>event_t</declname>
            <defname>event_t</defname>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>static std::size_t pars::ev::compute_spec_hash</definition>
        <argsstring>(const kind_of&lt; event_t &gt; &amp;ke)</argsstring>
        <name>compute_spec_hash</name>
        <qualifiedname>pars::ev::compute_spec_hash</qualifiedname>
        <param>
          <type>const kind_of&lt; event_t &gt; &amp;</type>
          <declname>ke</declname>
        </param>
    <requiresclause>kind_c&lt;kind_of&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/job.h" line="110" column="20" bodyfile="/home/runner/work/pars/pars/lib/include/pars/ev/job.h" bodystart="110" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespacepars_1_1ev_1ac84637ef36e6c43e0f0fda9b9c55440e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>kind_of</declname>
            <defname>kind_of</defname>
          </param>
          <param>
            <type>event_c</type>
            <declname>event_t</declname>
            <defname>event_t</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classpars_1_1ev_1_1job" kindref="compound">job</ref></type>
        <definition>static job pars::ev::make_job</definition>
        <argsstring>(std::size_t j_id, kind_of&lt; event_t &gt; ke)</argsstring>
        <name>make_job</name>
        <qualifiedname>pars::ev::make_job</qualifiedname>
        <param>
          <type>std::size_t</type>
          <declname>j_id</declname>
        </param>
        <param>
          <type>kind_of&lt; event_t &gt;</type>
          <declname>ke</declname>
        </param>
    <requiresclause>kind_c&lt;kind_of&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/job.h" line="120" column="12" bodyfile="/home/runner/work/pars/pars/lib/include/pars/ev/job.h" bodystart="120" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespacepars_1_1ev_1aa9008ca4ace86f33edb3a0eefd008e36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename event_t</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>pars::ev::sent</definition>
        <argsstring>(event_t, metadata&lt; sent, event_t &gt;) -&gt; sent&lt; event_t &gt;</argsstring>
        <name>sent</name>
        <qualifiedname>pars::ev::sent</qualifiedname>
        <param>
          <type>event_t</type>
        </param>
        <param>
          <type><ref refid="structpars_1_1ev_1_1metadata" kindref="compound">metadata</ref>&lt; sent, event_t &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/kind.h" line="53" column="1" declfile="/home/runner/work/pars/pars/lib/include/pars/ev/kind.h" declline="53" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacepars_1_1ev_1a275a1098a112d8f424e90916e6653713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename event_t</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>pars::ev::received</definition>
        <argsstring>(event_t, metadata&lt; received, event_t &gt;) -&gt; received&lt; event_t &gt;</argsstring>
        <name>received</name>
        <qualifiedname>pars::ev::received</qualifiedname>
        <param>
          <type>event_t</type>
        </param>
        <param>
          <type><ref refid="structpars_1_1ev_1_1metadata" kindref="compound">metadata</ref>&lt; received, event_t &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/kind.h" line="67" column="1" declfile="/home/runner/work/pars/pars/lib/include/pars/ev/kind.h" declline="67" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacepars_1_1ev_1a97196dda48d93a21b7696d6e73e9266d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename event_t</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>pars::ev::fired</definition>
        <argsstring>(event_t, metadata&lt; fired, event_t &gt;) -&gt; fired&lt; event_t &gt;</argsstring>
        <name>fired</name>
        <qualifiedname>pars::ev::fired</qualifiedname>
        <param>
          <type>event_t</type>
        </param>
        <param>
          <type><ref refid="structpars_1_1ev_1_1metadata" kindref="compound">metadata</ref>&lt; fired, event_t &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/kind.h" line="101" column="1" declfile="/home/runner/work/pars/pars/lib/include/pars/ev/kind.h" declline="101" declcolumn="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacepars_1_1ev_1a5ae21c09902e125632b0c4f37e20a07a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename mem_fn_t</type>
          </param>
          <param>
            <type>template&lt; typename &gt; typename</type>
            <declname>kind_of</declname>
            <defname>kind_of</defname>
            <defval>hf_traits&lt;mem_fn_t&gt;::template kind_type</defval>
          </param>
          <param>
            <type>typename event_t</type>
            <defval>hf_traits&lt;mem_fn_t&gt;::event_type</defval>
          </param>
          <param>
            <type>typename class_t</type>
            <defval>hf_traits&lt;mem_fn_t&gt;::class_type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="namespacepars_1_1ev_1a775df579549c610e3e2c8dae429f129c" kindref="member">handler_f</ref>&lt; kind_of, event_t &gt;</type>
        <definition>handler_f&lt; kind_of, event_t &gt; pars::ev::make_hf</definition>
        <argsstring>(mem_fn_t &amp;mem_fn, class_t *self)</argsstring>
        <name>make_hf</name>
        <qualifiedname>pars::ev::make_hf</qualifiedname>
        <param>
          <type>mem_fn_t &amp;</type>
          <declname>mem_fn</declname>
        </param>
        <param>
          <type>class_t *</type>
          <declname>self</declname>
        </param>
    <requiresclause>kind_c&lt;kind_of&gt; &amp;&amp; event_c&lt;event_t&gt;    </requiresclause>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/runner/work/pars/pars/lib/include/pars/ev/make_hf.h" line="58" column="11" bodyfile="/home/runner/work/pars/pars/lib/include/pars/ev/make_hf.h" bodystart="58" bodyend="89"/>
        <referencedby refid="structpars_1_1ev_1_1hf__registry_1ad8e4eac6e124f05d3bc86ba167bf1299" compoundref="hf__registry_8h" startline="73" endline="76">pars::ev::hf_registry::on</referencedby>
        <referencedby refid="classpars_1_1net_1_1pull_1a50522b569091475731c03c4bf0c7e09d" compoundref="pull_8h" startline="65" endline="68">pars::net::pull::on</referencedby>
        <referencedby refid="classpars_1_1net_1_1push_1a685d034edb4864b320ab2e22326eedd4" compoundref="push_8h" startline="64" endline="67">pars::net::push::on</referencedby>
        <referencedby refid="classpars_1_1net_1_1rep_1a377c054cdfc47674f4b67f752b1fd3af" compoundref="rep_8h" startline="75" endline="78">pars::net::rep::on</referencedby>
        <referencedby refid="classpars_1_1net_1_1req_1a6a931f98c4697d7cdab14d5bf8afefd0" compoundref="req_8h" startline="75" endline="78">pars::net::req::on</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/runner/work/pars/pars/lib/include/pars/concept/event.h" line="37" column="1"/>
  </compounddef>
</doxygen>
